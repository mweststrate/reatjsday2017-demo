// PREPS
// 1. Copy .vscode/javascript.json to local user folder
// 2. if middleware branch is not released yet, run `npm install pathTo/mobx-state-tree` first (don't forget to install build there)

// === STATIC APP ===

// === INTRODUCE MODELS ===
// store.js - snippet1
import { types } from "mobx-state-tree"

export const Todo = types
    .model({
        text: "stuff",
        completed: false,
        id: types.number
    })

export const Store = types
    .model({
        filter: types.enumeration("filter", ["all", "active", "completed"]),
        todos: types.array(Todo),
    })

// index.js - snippet2
import { Store } from "./models/store"

let store = Store.create(initialState)

render(<App store={store} />, document.getElementById("root"))

---
// === ACTIONS ===

// Show @ts-check with completed. Then disable
// Todo in store.js - snippet3
.actions(self => ({
        complete() {
            self.completed = !self.completed
        }
}))

 // TodoItem.js
 onChange of checkbox to : `onChange={todo.complete}`

---

// add observer to

Footer
MainSection
TodoItem
// app should basically work now (toggling / adding items)

---
// === VIEWS ===

// Store in store.js. - snippet4
 .actions(self => ({
        setFilter(filter) {
            self.filter = filter
        }
        addTodo(text) {
            self.todos.push({ text, id: Math.random() })
        },
 }))

---

// adding views to Store
// store.js - snippet5
.views(self => ({
        get activeCount() {
            return self.todos.filter(todo => todo.completed === true).length
        },
        get filteredTodos() {
            switch (self.filter) {
                case "all":
                    return self.todos
                case "active":
                    return self.todos.filter(todo => !todo.completed)
                case "completed":
                    return self.todos.filter(todo => todo.completed)
            }
        }
    }))


// switch MainSection from rendering `todos` to `filteredTodos`

---

// === SNAPSHOTS ===

// index.js - snippet6
import { onSnapshot } from "mobx-state-tree"

const initialState = localStorage.getItem("store")
    ? JSON.parse(localStorage.getItem("store"))
    : // what was there

onSnapshot(store, snapshot => localStorage.setItem("store", JSON.stringify(snapshot)))

---

// === TIME TRAVEL ===

// Time travelling (show that this works, even with reload)
// N.B. if middleware branch is not released yet, run `npm install pathTo/mobx-state-tree` first (don't forget to install build there)

// store.js - snippet7
import TimeTraveller from "mobx-state-tree/middleware/TimeTraveller"

// Store.history
        history: types.optional(TimeTraveller, { targetPath: "../todos" })

---

// === AUTOMATICALLY APPLY CHANGES ===

// Break time traveler, index.js:

// index.js - snippet8
setInterval(() => {
     store.addTodo("TEST")
}, 5000)


---

// === UNDO REDO MANAGER ===

// UndoManager

// store.js - snippet9
import UndoManager from "mobx-state-tree/middleware/UndoManager"

// index.js - snippet10

setInterval(() => {
     store.history.withoutUndo(() => {
         store.addTodo("TEST")
     })
}, 5000)


---

// === REMOTE DEVTOOLS ===

// index.js - snippet11

import { connectReduxDevtools } from "mobx-state-tree/middleware/redux"

connectReduxDevtools(require("remotedev"), store)
